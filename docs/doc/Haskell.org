#+TITLE: Haskell

Haskell is something worth trainning daily.

* Philosophy
  1. pure function
  2. type for engineering


* Basics
 
** Rules
  
*** Cpaitalization in Haskell
    1. Functions, Parameters and Bindings must start with a 
/lowercase/ letter. 
In case of an operator name, it *must not* start with :.
    2. Types, constructors, type classes and kinds must start
with an /uppercase/ letter. If using an operator name, it
*must* start with :.


** Operator

*** infixity
   
infixl 5 :::&
data L' a = N | a :::& L' a

2 ::: & (3 :::& N)

*NOTE* bracket MUST add 

* Practice

** packages

*** wreq
   An easy-to-use HTTP client library.

   A web client library that is designed for ease of use.

    [[https://www.stackage.org/lts-8.8/hoogle?q=wreq][Hoogle-LTS-8.8-Search]]
    [[http://www.serpentine.com/wreq/tutorial.html#uploading-data-via-post][wreq-tutorial]]

** intero

** ghci


*** tips

**** multi-line input
 Prelude> :{ 
 Prelude| 1/2 + 
 Prelude| 1/3 
 Prelude| :} 
 0.8333333333333333
   **Warning* to start a multiline block :{ must be the only text entered in the first line.


* Snippets

** real word haskell

   
*** Monad
    which is a key point.

**** 
   
*** Maybe >>= shortup?

**** text
  let forever a = a >> forever a
  forever Nothing
 Nothing
  let trueForever a = a >> trueForever a >> trueForever a
  trueForever Nothing
 Nothing
   
    *YES, Nothing >>= _ = Nothing will cause left shortup*

**** explain
    this is the comment:
     As of September 2012, (>>) does short circuit with Nothing.

 To test it, try in ghci:

 let forever a = a >> forever a
 forever Nothing

 If every (>>) did match a Nothing on the left and return a "new" Nothing, this computation should never end.
 Instead, it's istantaneous, because of the implementation of (>>) for maybe:

 Nothing >> _ = Nothing

 which short-circuits the computation the first time a Nothing is encountered.


*** lookupM :: (MonadPlus m, Eq a) => a -> [(a, b)] -> m b

** functions

*** foldl :: Foldable t => (b -> a -> b) -> b -> t a -> b

*** lookup :: Eq a => a -> [(a, b)] -> Maybe a

*** (.) :: (b -> c) -> (a -> b) -> a -> c
(.) . (.) = (b -> c) -> (a1 -> a2 -> b) -> a1 -> a2 -> c

*** fmap :: Functor f => (a -> b) -> f a -> f b
(fmap . fmap)::(a -> b) -> f (f1 a) -> f (f1 b)

 
** type

*** Functor
    instance Functor ((->) r) where
    fmap f g = f . g
    ->
     { fmap (+2) (+3) 10 == 15}

** Monad , still monad
  
*** In Practice

**** functors: you apply a function to a wrapped<Functor> value using fmap.

**** applicatives: you apply a wrapped<Applicative> function to a wrapped<Applicative>value using <*> or liftA.

**** monads: you apply (or /*bind*/) a function which return a wrapped<Monad> value, to a wrapped value using >>= or liftM.

** Arrows
  functions are arrows.
  a -> b is a representation of (->) a b
  
* Language Extended
  
** String

__ ghci> :set -XOverloadedStrings

If you’re using wreq from a Haskell source file, put a pragma at the top of your file:

{-# LANGUAGE OverloadedStrings #-}

** Deriving
 
*** {-# LANGUAGE GeneralizedNewtypeDeriving #-}

As its name suggests, the GeneralizedNewtypeDeriving extension
 broadens our ability to derive typeclass instances, and it 
is specific to newtype declarations. If the type we're wrapping 
is an instance of any typeclass, the extensions can automatically
 make our new type an instance of that typeclass as follows

e.g:
newtype Supply s a = S (State [s] a)
  deriving (Functor, Applicative, Monad)

** Class typeclass 
  
*** {-# OPTIONS_GHC XFlexibleInstances #-}
   跳出Haskell 2010 instance 基类型（Int...)和类型构造符应用于类型变量定义
的类型（[..])  
  ->
   instance Info (Int -> Bool) where
  examples = [(>0)]
  size :: (Int -> Bool) -> Int
  size  _  = 3

  size ((>3) :: (Int -> Bool))
3
  
